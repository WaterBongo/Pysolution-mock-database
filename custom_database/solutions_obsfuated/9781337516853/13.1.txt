VkRGU2FrNUZNVlZVV0hCUFpXeFdORlJ0Y0c1TlZURTFaREprVWsxdGFHOVpNR2hUWWtkT2NGRllhRTVsVkZJMFZFVk9RMVZYVG5SUFYyeHBVakZhTUZOVlVrZFNhM2gxVVc1V1lXVlZSakJUVldSdlRVZFNTVkZ1Y0ZCaFZHZ3lXbFprUjJFeVJsUk9XSEJvWlZSc2QxUkVUbE5WTURGMVZHdGtUMDF1VWpCV1ZsVjNaRVpXVmxkclNrUmhiWE42VkRCU1JtVnJNVFpaZWtaT1ZrWnJNRlJzVWs1ak1HeEdWRzA1V2xkRlNYZFhiR2hLV2pBeFZWUllWazVWTTJSdVZsVm9TMlJzYkhSbFIzaHBWVEJHTlZWc1RURmtNa3AwV1RKa1RWVXdTblphUldoVFpESk9ObUl6V2sxTk1uaHZWMnRrY21SWFRYbGpNMXBvVlhwc2IxZFVUa05qYlZKeFdqTm9UVlpyTlROVWJYUkhWRmRTTTJKNlZrOWxiV1EwVkZod1RrMHdOVlZTVkVwUVVrWldObFJGVGtOU1IwWklVbTVrYTFJeFdqVlRWVkpHWld0NGNWSllUa3BTYTBvMVdXcEtTMk14Y0ZoTlIyUk9UVVpXTVZrd1l6RmlhMnhFVFVka2FGTkdTWGRaTUdoT1RtdDROVTlVVmxwV01VcDNWRWMxVDJOcmQzbGhNMXBoVWtWd1NWVnJZM2hWYkU1RlZHeEthbFp0ZUZsV2JUVnFVekE1VlZsNlVrNVdSVEUyVkc1d1ZtVkZOWEZhZWtaT1pWaGtibFZVU205aFIwNUpWVzE0YW1GVlJqUlVXR3N3WlVWNFJGRnNSbXBpVkd4d1dXdGtWMlJGYkVWVmExcE5ZbXRLTVZkdWJFSmtSV3hJWVVSQ2ExTkZTalpVTW1zMFpHMVdXRkp0ZEdoVmVsWTJXVmhyTldORmVEWlVWRXBQVm10YVdGZHRkREJpUlRCNFdrVTFWbE5JUVhwUk1uQnlUVEE1UlZKWWNFNWxiVTE0VkZaU1drNUZOVlZVV0U1S1VsVTFkbGRXYUVOTlJuQlpVMWRrVGxaRk1URlVWazR6V2pGV1NWTnVXbHBpV0doeldXeE9RazFzU2xST1dHUnBZbGRPYmxSR1RrTmlNbEpKVlc1a2FtVnRPVEpVUkU1ellVWndTR0V6Vm1wTmJrNHlXVlpOTlZReVNuVlZiRUpUVFRKb2RsWlVTakJVUjFaSFUyNVNhMlF5T0RGVWJuQnVaVVV4TmxSVVRrOVdSVlY1VkRCU1ZtVnJlRVJSYTFKb1VqQmFNMXBGWkZkbFZXeEZVbGh3VFdGclZucFRWVnBEWlZkSmVWTnVUbUZXZWtKdVZHeFdWbVJYVGtoT1Z6VktVWHBDYmxsVmFGTk5SMDVKVkZSYVRXVlVhekZYVm1SVFkwVjRkVlJ1U2sxTmJYUXlWVmQwZDJJd05VbGFSRnBWVTBaS1VsZFhOWE5YYkZwWVdUQjBVRlpIVFRCVVZsSk9aV3MxTmxaWWFFOWhiV040VkZoc00xb3hSWGxoUjJocVUwWktjMWt5YkVKbFJURTFUa2hvVFZFd1NsSlpNakExWVZkS1NGWnVVa3BTUjFKSFZFYzFRMlJXY0RWUldGSktVakpuZDFwRmFFTmxhemx3VDBoYWJGWXdXbkpaVmsweFpXMUdOVTlZUWsxTlJWcExXVlprVjFaVk1UWlZiRTVUVm10YVYxZFljRzlOTUU1eFlYcE9VRkpGVmpaVVdIQnFUVlV4VlZkVVVrOVdSVEY2VTFWV1QySXhiRmxSYWtKaFYwVnNibFJXVWs1a1ZURlVaREprVmxORmNESlhWekUwWWtkS1ZGRlVVbE5WZWxZeldXMHhhbG93ZUZSUmJUbHJVMFpLTTFremNIWmthM2Q2WWtkb1lWSXlkREZaZWtwNlpHMUdWRTlJY0ZWTk1WcEhXVlprYzFSSFVsaGtTRUphVFVoU2VWcElaSFpPVlRVMldqTm9UbVZyTUhwVWJGSkdUV3M1UlZaWWNFMVJNRXBGV1ZWa1IyUXlVa2hXYm14S1VrVldObFJIY0Vaak1HeEhVVzVzYVUxcmNIcFhiR04zV2pBNVZsWllWbXBTZWxaMVUxVk5kMW95UmtsVmFrSnFVMFV3TWxSSWF6Vk9WbXhZVlc1Q1RXSnJOWGxVUkVweVpHczFkVlpyYUd0VFIyaHdWa1pTWVZaVk5YVlJhMnhzVWpKT1RGUXhVbXBPUlRGVlZGaHdUMlZzVmpSVWJYQnVUVlV4TldReVpGSk5iV2h2V1RCb1UySkhUbkJSV0doT1pWUlNORlJGVGtOVlYwNTBUMWRzYVZJeFdqQlRWVkpHWkRGS1ZFNVlaR2xpVjA1dVZFWk9RMkl5VWtsVmJtUnFaVzA1TWxSRVRuTmhSbkJJWVROV2FrMXVUakpaVmswMVZXeEdjVkp0Y0ZaaVdFSXpWMjE0YTFWV1RsbFhibFpyWkRJNE1WUnVjRzVsUlRFMlZGUk9UMVpGVlhsVU1GSldaV3Q0UkZGclVtaFNNRm96V2tWa1YyVlZiRVZTV0hCTllXdFdlbE5WV2tObFYwbDVVMjVPWVZaNlFtNVVWbEpIVW10NGRWRnVWbUZsVlVZd1UxVmtiMDFIVWtsUmJuQlFZVlJvTWxwV1pFZGhNa1pVVGxod2FHVlViSGRVUkVaTFZVWndjMVZ0TVZSU1JrcE5WWHBKTVdOR1ZsZFdiRXBFWVcxemVsUXdVa1psYXpFMldYcEdUbFpHYXpCVWJGSk9ZekJzUmxSdE9WcFhSVWwzVjJ4b1Nsb3dNVlZVV0ZaT1ZUTmtibFpWYUV0a2JHeDBaVWQ0YVZVd1JqUlVWM1JXWkZkT1NFNVhOVXBSZWtKdVdWVm9VMDFIVGtsVVZGcE5aVlJyTVZkV1pGTmpSWGgxVkc1S1RVMXRkREpWTWpWRFpGZE5lbEZ0Ums5aWF6UXdWa2R6TlZSc1JsaFpNSFJRVmtkTk1GUldVazVsYXpVMlZsaG9UMkZ0WTNoVVdHd3pXakZGZVdGSGFHcFRSa3B6V1RKc1FtVkZNVFZPU0doTlVUQktVbGt5TURWaFYwcElWbTVTU2xKRlZqWlZiRTB4WkRKS2RGa3laRTFWTUVwMldrVm9VMlF5VGpaaU0xcE5UVEo0YjFkclpISmtWMDE1WXpOYWFGVjZiRlJVTVdSSFRrWkdkVkpyZUd0V00xSXpWV3RqZDA1SFVqTmllbFpQWlcxa05GUlljRTVOTURWVlVsUktVRkpHVmpaVVJVNURVa2RHU0ZKdVpHdFNNVm8xVTFWU1JtVnJlSEZTV0U1S1VtdEtOVmxxU2t0ak1YQllUVWRrVGxaR1NrZFVSelZEWkZad05WRllVa3BTTW1kM1drVm9RMlZyT1hCUFNGcHNWakJhY2xsV1RURmxiVVkxVDFoQ1RVMUlhSEpVVlZwTFpVZFNjVmRxVWxWaGJXaERXVEZTUzJKclRuRmhlazVRVWtWV05sUlljR3BOVlRGVlYxUlNUMVpGTVhwVFZWWlBZakZzV1ZGcVFtRlhSV3h1VkZaU1RtUlZNVlJrTW1SV1UwVndNbGRYTVRSaVIwcFVVVmhvVDFaV1ZqRlpNR014WW10c1JFMUhaR2hUUmtsM1dUQm9UazVyZURWUFZGWmFWakZLZDFSSE5VOWphM2Q1WVROYVdHSkhlRk5hVlZKWFpXMU9WbFZzYkd0U01YQjFXVlpvYWxNd09WVlplbEpPVmtVeE5sUnVjRlpsUlRWeFducEdUbVZZWkc1VlZFcHZZVWRPU1ZWdGVHcGhWVVkwVkZock1HVkZlRVJSYkVacVlsUnNjRmxyWkZka1JXeEZVbFJLVTFWNlZqTlpiVEZxV2pCNFZGRnRPV3RUUmtveldUTndkbVJyZDNwaVIyaGhVakowTVZsNlNucGtiVVpVVDFSU1UwMXFiRzFXUnpGTFlteGtTRmRxV21oaVZYQlZWVlpHZGs1Vk5UWmFNMmhPWldzd2VsUnNVa1pOYXpsRlZsaHdUVkV3U2tWWlZXUkhaREpTU0ZadWJFcFNSVlkyVkVkd1JtTXdiRWRSYm14cFRXdHdlbGRzWTNkYU1ERlZXa1ZhVFdKclNqRlhibXhDWkVWc1NHRkVRbXRUUlVvMlZESnJOR1J0VmxoU2JYUm9WWHBXTmxsWWF6VmpSWGQ1V2taT1ZWZEdiM2hhUldRd1VtMU9XRkp0YkZsTlNHaFRVVEp3Y2swd09VVlNXSEJPWlcxTmVGUldVbHBPUlRWVlZGaE9TbEpWTlhaWFZtaERUVVp3V1ZOWFpFNVdSVEV4VkZaT00xb3hWa2xUYmxwYVlsaG9jMWxzVGtKbFJUbEdWbGhXYWxKNlZuVlRWVTEzV2pKR1NWVnFRbXBUUlRBeVZFaHJOVTVXYkZoVmJrSk5ZbXMxZVZSRVNuSmtiRlYzV1hwV1dtSlViRlJWVkU1SFVsVXhSVlZxVGxaTlJWWk1WREZTYWs1Rk1WVlVXSEJQWld4V05GUnRjRzVOVlRFMVpESmtVazF0YUc5Wk1HaFRZa2RPY0ZGWWFFNWxWRkkwVkVWT1ExVlhUblJQVjJ4cFVqRmFNRk5WVWtaT1ZrcFVUbGhrYVdKWFRtNVVSazVEWWpKU1NWVnVaR3BsYlRreVZFUk9jMkZHY0VoaE0xWnFUVzVPTWxsV1RUVmxWa1p4WVVoT1ZWSkdTbWhaYkZaYVpFWldSbVJGVW10a01qZ3hWRzV3Ym1WRk1UWlVWRTVQVmtWVmVWUXdVbFpsYTNoRVVXdFNhRkl3V2pOYVJXUlhaVlZzUlZKWWNFMWhhMVo2VTFWYVEyVlhTWGxUYms1aFZucENibFJYY0VkU2EzaDFVVzVXWVdWVlJqQlRWV1J2VFVkU1NWRnVjRkJoVkdneVdsWmtSMkV5UmxST1dIQm9aVlJzZDFSSWNGTmpiRTV4WWtkMGFHRXdXalpaYkdSUFkyeHdWbGR0TlVSaGJYTjZWREJTUm1Wck1UWlpla1pPVmtack1GUnNVazVqTUd4R1ZHMDVXbGRGU1hkWGJHaEtXakF4VlZSWVZrNVZNMlJ1VmxWb1MyUnNiSFJsUjNocFZUQkdOVlJWVmxaa1YwNUlUbGMxU2xGNlFtNVpWV2hUVFVkT1NWUlVXazFsVkdzeFYxWmtVMk5GZUhWVWJrcE5UVzEwTWxSR1ZURlRSazVJVFZkc1ZGWldTazFVYlRWUFRURmtTVmt3ZEZCV1IwMHdWRlpTVG1Wck5UWldXR2hQWVcxamVGUlliRE5hTVVWNVlVZG9hbE5HU25OWk1teENaVVV4TlU1SWFFMVJNRXBTV1RJd05XRlhTa2hXYmxKS1VrVnNOVlZzVFRGa01rcDBXVEprVFZVd1NuWmFSV2hUWkRKT05tSXpXazFOTW5odlYydGtjbVJYVFhsak0xcG9WWHBzVEZaRmFGTlpWbEp6WVVkMFdsWXllRXBaVm1ONFRURndNMko2Vms5bGJXUTBWRmh3VGswd05WVlNWRXBRVWtaV05sUkZUa05TUjBaSVVtNWthMUl4V2pWVFZWSkdaV3Q0Y1ZKWVRrcFNhMG8xV1dwS1MyTXhjRmhOUjJST1lXczFSMVJITlVOa1ZuQTFVVmhTU2xJeVozZGFSV2hEWldzNWNFOUlXbXhXTUZweVdWWk5NV1Z0UmpWUFdFSk5UVzF6TUZsVVRtOVZSa3B5VFZaYVUxWlZOVzlVTVZwSFVXdE9jV0Y2VGxCU1JWWTJWRmh3YWsxVk1WVlhWRkpQVmtVeGVsTlZWazlpTVd4WlVXcENZVmRGYkc1VVZsSk9aRlV4VkdReVpGWlRSWEF5VjFjeE5HSkhTbFJSV0d4UFVsWldNVmt3WXpGaWEyeEVUVWRrYUZOR1NYZFpNR2hPVG10NE5VOVVWbHBXTVVwM1ZFYzFUMk5yZDNsaE0xcFRUVVpWTUZsVlZrdGhNV3Q1VW1zNWFXSlVRWGRXVkVKR1V6QTVWVmw2VWs1V1JURTJWRzV3Vm1WRk5YRmFla1pPWlZoa2JsVlVTbTloUjA1SlZXMTRhbUZWUmpSVVdHc3daVVY0UkZGc1JtcGlWR3h3V1d0a1YyUkZiRVZUVkVaVFZYcFdNMWx0TVdwYU1IaFVVVzA1YTFOR1NqTlpNM0IyWkd0M2VtSkhhR0ZTTW5ReFdYcEtlbVJ0UmxSUFZrNVNWMGRTZFZaWGVFOU5SbFpXV2tad1RsSjZSWGxWVmtaMlRsVTFObG96YUU1bGF6QjZWR3hTUmsxck9VVldXSEJOVVRCS1JWbFZaRWRrTWxKSVZtNXNTbEpGVmpaVVIzQkdZekJzUjFGdWJHbE5hM0I2VjJ4amQxb3dNWEZYYTFwTlltdEtNVmR1YkVKa1JXeElZVVJDYTFORlNqWlVNbXMwWkcxV1dGSnRkR2hWZWxZMldWaHJOV05GZDNwWFZGWlBUVzVDVUZkWE5VOWliRXB4VjFSQ2JGWldXWHBSTW5CeVRUQTVSVkpZY0U1bGJVMTRWRlpTV2s1Rk5WVlVXRTVLVWxVMWRsZFdhRU5OUm5CWlUxZGtUbFpGTVRGVVZrNHpXakZXU1ZOdVdscGlXR2h6V1d4T1FtVlZOSGRXV0ZacVVucFdkVk5WVFhkYU1rWkpWV3BDYWxORk1ESlVTR3MxVGxac1dGVnVRazFpYXpWNVZFUktjbVJzVVhsUFZGWldZa1UxVDFsVldrdGxSbEY0VVd4YVZsZEhUa3c9